// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go

// Package scan is a generated GoMock package.
package scan

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	packet "github.com/v-byte-cpu/sx/pkg/packet"
)

// MockPacketSource is a mock of PacketSource interface.
type MockPacketSource struct {
	ctrl     *gomock.Controller
	recorder *MockPacketSourceMockRecorder
}

// MockPacketSourceMockRecorder is the mock recorder for MockPacketSource.
type MockPacketSourceMockRecorder struct {
	mock *MockPacketSource
}

// NewMockPacketSource creates a new mock instance.
func NewMockPacketSource(ctrl *gomock.Controller) *MockPacketSource {
	mock := &MockPacketSource{ctrl: ctrl}
	mock.recorder = &MockPacketSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketSource) EXPECT() *MockPacketSourceMockRecorder {
	return m.recorder
}

// Packets mocks base method.
func (m *MockPacketSource) Packets(ctx context.Context, r *Range) <-chan *packet.BufferData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Packets", ctx, r)
	ret0, _ := ret[0].(<-chan *packet.BufferData)
	return ret0
}

// Packets indicates an expected call of Packets.
func (mr *MockPacketSourceMockRecorder) Packets(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Packets", reflect.TypeOf((*MockPacketSource)(nil).Packets), ctx, r)
}
