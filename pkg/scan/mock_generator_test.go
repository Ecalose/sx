// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package scan is a generated GoMock package.
package scan

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gopacket "github.com/google/gopacket"
)

// MockPacketFiller is a mock of PacketFiller interface.
type MockPacketFiller struct {
	ctrl     *gomock.Controller
	recorder *MockPacketFillerMockRecorder
}

// MockPacketFillerMockRecorder is the mock recorder for MockPacketFiller.
type MockPacketFillerMockRecorder struct {
	mock *MockPacketFiller
}

// NewMockPacketFiller creates a new mock instance.
func NewMockPacketFiller(ctrl *gomock.Controller) *MockPacketFiller {
	mock := &MockPacketFiller{ctrl: ctrl}
	mock.recorder = &MockPacketFillerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketFiller) EXPECT() *MockPacketFillerMockRecorder {
	return m.recorder
}

// Fill mocks base method.
func (m *MockPacketFiller) Fill(packet gopacket.SerializeBuffer, pair *Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fill", packet, pair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fill indicates an expected call of Fill.
func (mr *MockPacketFillerMockRecorder) Fill(packet, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fill", reflect.TypeOf((*MockPacketFiller)(nil).Fill), packet, pair)
}
